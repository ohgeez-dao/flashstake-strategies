{
  "address": "0xDdb5A925EcD6A9e2DbAA2afE4AEA6e21dC8B4Cc7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flashStrategyFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sousChef",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountLP",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "path1",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "cook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashStrategyFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flpTokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sousChef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbde0874b3e9098b1db29018f241704b1854454da017afb77b7c2b3b22d340a80",
  "receipt": {
    "to": null,
    "from": "0x612ef87bfcd858687160294b0eFFACA0CBA342E2",
    "contractAddress": "0xDdb5A925EcD6A9e2DbAA2afE4AEA6e21dC8B4Cc7",
    "transactionIndex": 81,
    "gasUsed": "467758",
    "logsBloom": "0x
    "blockHash": "0xb1c9e2185cc9a0ef36bec91c3480b5c0b33266049193cbeaabe26aec65c2dc28",
    "transactionHash": "0xbde0874b3e9098b1db29018f241704b1854454da017afb77b7c2b3b22d340a80",
    "logs": [],
    "blockNumber": 16377979,
    "cumulativeGasUsed": "5467013",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x77b8E6e577fd3e90553dbF205D3854a649414741",
    "0x991660133a987F21c6225027C33B9B5680272850"
  ],
  "numDeployments": 1,
  "solcInputHash": "5395ab54c5fbf29d1661c74f09b9674f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashStrategyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sousChef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLP\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashStrategyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flpTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sousChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FSushiCookV0.sol\":\"FSushiCookV0\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/FSushiCookV0.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./interfaces/IFlashStrategySushiSwapFactory.sol\\\";\\nimport \\\"./interfaces/IFlashStrategySushiSwap.sol\\\";\\nimport \\\"./interfaces/IFarmingLPTokenFactory.sol\\\";\\nimport \\\"./interfaces/IFarmingLPToken.sol\\\";\\nimport \\\"./interfaces/ISousChef.sol\\\";\\nimport \\\"./interfaces/IFSushiBill.sol\\\";\\n\\ninterface IFlashProtocol_ {\\n    function stake(\\n        address _strategyAddress,\\n        uint256 _tokenAmount,\\n        uint256 _stakeDuration,\\n        address _fTokensTo,\\n        bool _issueNFT\\n    )\\n        external\\n        returns (\\n            address stakerAddress,\\n            address strategyAddress,\\n            uint256 stakeStartTs,\\n            uint256 stakeDuration,\\n            uint256 stakedAmount,\\n            bool active,\\n            uint256 nftId,\\n            uint256 fTokensToUser,\\n            uint256 fTokensFee,\\n            uint256 totalFTokenBurned,\\n            uint256 totalStakedWithdrawn\\n        );\\n}\\n\\ncontract FSushiCookV0 {\\n    address public immutable flashStrategyFactory;\\n    address public immutable flpTokenFactory;\\n    address public immutable sousChef;\\n\\n    constructor(address _flashStrategyFactory, address _sousChef) {\\n        flashStrategyFactory = _flashStrategyFactory;\\n        flpTokenFactory = IFlashStrategySushiSwapFactory(_flashStrategyFactory).flpTokenFactory();\\n        sousChef = _sousChef;\\n    }\\n\\n    function cook(\\n        uint256 pid,\\n        uint256 amountLP,\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256 amountMin,\\n        address beneficiary,\\n        uint256 stakeDuration,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        address flpToken = IFarmingLPTokenFactory(flpTokenFactory).getFarmingLPToken(pid);\\n        IFarmingLPToken(flpToken).depositSigned(amountLP, path0, path1, amountMin, address(this), deadline, v, r, s);\\n\\n        uint256 amountFLP = IFarmingLPToken(flpToken).balanceOf(address(this));\\n        address strategy = IFlashStrategySushiSwapFactory(flpTokenFactory).getFlashStrategySushiSwap(pid);\\n\\n        address protocol = IFlashStrategySushiSwap(strategy).flashProtocol();\\n        (, , , , , , , uint256 fTokensToUser, , , ) = IFlashProtocol_(protocol).stake(\\n            strategy,\\n            amountFLP,\\n            stakeDuration,\\n            beneficiary,\\n            false\\n        );\\n\\n        address bill = ISousChef(sousChef).getBill(pid);\\n        IFSushiBill(bill).deposit(fTokensToUser, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x785f108a981f0278f0e4da8dadff1fd737501c70aca9a4379b664f11d4331c03\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFSushiBill.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IFSushiBill is IERC20Metadata {\\n    error NoClaimableRewards();\\n\\n    event Deposit(address indexed account, uint256 amount, address indexed beneficiary);\\n    event Withdraw(address indexed account, uint256 amount, address indexed beneficiary);\\n    event Checkpoint();\\n    event UserCheckpoint(address indexed account);\\n    event ClaimRewards(address indexed account, address indexed beneficiary, uint256 amount);\\n\\n    function sousChef() external view returns (address);\\n\\n    function pid() external view returns (uint256);\\n\\n    function fToken() external view returns (address);\\n\\n    function points(uint256 week) external view returns (uint256);\\n\\n    function lastCheckpoint() external view returns (uint256 timestamp);\\n\\n    function userPoints(address account, uint256 week) external view returns (uint256);\\n\\n    function userLastCheckpoint(address account) external view returns (uint256 timestamp);\\n\\n    function claimedRewards(address account) external view returns (uint256);\\n\\n    function nextClaimableWeek(address account) external view returns (uint256);\\n\\n    function initialize(uint256 _pid, address _fToken) external;\\n\\n    function deposit(uint256 amount, address beneficiary) external;\\n\\n    function withdraw(uint256 amount, address beneficiary) external;\\n\\n    function claimRewards(address beneficiary) external;\\n\\n    function checkpoint() external;\\n\\n    function userCheckpoint(address account) external;\\n}\\n\",\"keccak256\":\"0x10aced848e0f105686eb4878940a81f0bceb201a56494c50d6204aef5dc62ec1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFarmingLPToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFarmingLPToken is IERC20 {\\n    error InvalidPath();\\n    error InsufficientYield();\\n    error InsufficientAmount();\\n    error NoMigratorSet();\\n\\n    event Deposit(uint256 shares, uint256 amountLP, address indexed beneficiary);\\n    event Withdraw(uint256 shares, uint256 amountLP, address indexed beneficiary);\\n    event EmergencyWithdraw(uint256 shares, uint256 amountLP, address indexed beneficiary);\\n    event ClaimSushi(uint256 shares, uint256 yield, address indexed beneficiary);\\n    event Migrate(uint256 shares, uint256 amountLP, address indexed beneficiary);\\n    event EmergencyMigrate(uint256 shares, uint256 amountLP, address indexed beneficiary);\\n\\n    function initialize(\\n        address _router,\\n        address _masterChef,\\n        uint256 _pid\\n    ) external;\\n\\n    function factory() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function masterChef() external view returns (address);\\n\\n    function sushi() external view returns (address);\\n\\n    function pid() external view returns (uint256);\\n\\n    function lpToken() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function withdrawableTotalLPs() external view returns (uint256);\\n\\n    function withdrawableLPsOf(address account) external view returns (uint256);\\n\\n    function withdrawableTotalYield() external view returns (uint256);\\n\\n    function withdrawableYieldOf(address account) external view returns (uint256);\\n\\n    function totalShares() external view returns (uint256);\\n\\n    function sharesOf(address account) external view returns (uint256);\\n\\n    function approveMax() external;\\n\\n    function depositSigned(\\n        uint256 amountLP,\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256 amountMin,\\n        address beneficiary,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function deposit(\\n        uint256 amountLP,\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256 amountMin,\\n        address beneficiary,\\n        uint256 deadline\\n    ) external;\\n\\n    function depositWithSushi(\\n        uint256 amount,\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256 amountLPMin,\\n        address beneficiary,\\n        uint256 deadline\\n    ) external;\\n\\n    function withdraw(uint256 shares, address beneficiary) external;\\n\\n    function emergencyWithdraw(address beneficiary) external;\\n\\n    function migrate(address beneficiary, bytes calldata params) external;\\n\\n    function emergencyMigrate(address beneficiary, bytes calldata params) external;\\n\\n    function checkpoint() external;\\n}\\n\",\"keccak256\":\"0x72184ba706021d3c901e7481b624e95d3d43699335d159baf778de69a2edce5e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFarmingLPTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFarmingLPTokenFactory {\\n    error InvalidAddress();\\n    error MigratorSet();\\n    error TokenCreated();\\n\\n    event UpdateVault(address indexed vault);\\n    event UpdateMigrator(address indexed migrator);\\n    event CreateFarmingLPToken(uint256 indexed pid, address indexed token);\\n\\n    function router() external view returns (address);\\n\\n    function masterChef() external view returns (address);\\n\\n    function yieldVault() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getFarmingLPToken(uint256 pid) external view returns (address);\\n\\n    function predictFarmingLPTokenAddress(uint256 pid) external view returns (address token);\\n\\n    function updateYieldVault(address vault) external;\\n\\n    function updateMigrator(address vault) external;\\n\\n    function createFarmingLPToken(uint256 pid) external returns (address token);\\n}\\n\",\"keccak256\":\"0x1cdd684bf0d94c6bce80efcc5b93761a02356bde314f4851f1ba82059378e5c4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFlashStrategy {\\n    event BurnedFToken(address indexed _address, uint256 _tokenAmount, uint256 _yieldReturned);\\n\\n    // This is how principal will be deposited into the contract\\n    // The Flash protocol allows the strategy to specify how much\\n    // should be registered. This allows the strategy to manipulate (eg take fee)\\n    // on the principal if the strategy requires\\n    function depositPrincipal(uint256 _tokenAmount) external returns (uint256);\\n\\n    // This is how principal will be returned from the contract\\n    function withdrawPrincipal(uint256 _tokenAmount) external;\\n\\n    // Responsible for instant upfront yield. Takes fERC20 tokens specific to this\\n    // strategy. The strategy is responsible for returning some amount of principal tokens\\n    function burnFToken(\\n        uint256 _tokenAmount,\\n        uint256 _minimumReturned,\\n        address _yieldTo\\n    ) external returns (uint256);\\n\\n    // This should return the current total of all principal within the contract\\n    function getPrincipalBalance() external view returns (uint256);\\n\\n    // This should return the current total of all yield generated to date (including bootstrapped tokens)\\n    function getYieldBalance() external view returns (uint256);\\n\\n    // This should return the principal token address (eg DAI)\\n    function getPrincipalAddress() external view returns (address);\\n\\n    // View function which quotes how many principal tokens would be returned if x\\n    // fERC20 tokens are burned\\n    function quoteMintFToken(uint256 _tokenAmount, uint256 duration) external view returns (uint256);\\n\\n    // View function which quotes how many principal tokens would be returned if x\\n    // fERC20 tokens are burned\\n    // IMPORTANT NOTE: This should utilise bootstrap tokens if they exist\\n    // bootstrapped tokens are any principal tokens that exist within the smart contract\\n    function quoteBurnFToken(uint256 _tokenAmount) external view returns (uint256);\\n\\n    // The function to set the fERC20 address within the strategy\\n    function setFTokenAddress(address _fTokenAddress) external;\\n\\n    // This should return what the maximum stake duration is\\n    function getMaxStakeDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8c72e893e2c11a247880fbacf8a0f761268797b789d269f7e0714c00efd5b988\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashStrategySushiSwap.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IFlashStrategy.sol\\\";\\n\\ninterface IFlashStrategySushiSwap is IFlashStrategy {\\n    error Forbidden();\\n    error InvalidVault();\\n    error AmountTooLow();\\n    error InsufficientYield();\\n    error InsufficientTotalSupply();\\n\\n    function factory() external view returns (address);\\n\\n    function flashProtocol() external view returns (address);\\n\\n    function fToken() external view returns (address);\\n\\n    function sushi() external view returns (address);\\n\\n    function flpToken() external view returns (address);\\n\\n    function initialize(address _flashProtocol, address _flpToken) external;\\n}\\n\",\"keccak256\":\"0xa533e69b48a4816db0e03fbd23eb39bad5ab23e762602a326619fb92cb94a774\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashStrategySushiSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFlashStrategySushiSwapFactory {\\n    error InvalidFee();\\n    error InvalidFeeRecipient();\\n    error FlashStrategySushiSwapCreated();\\n\\n    event UpdateStakeFeeBPS(uint256 fee);\\n    event UpdateFlashStakeFeeBPS(uint256 fee);\\n    event UpdateFeeRecipient(address feeRecipient);\\n    event CreateFlashStrategySushiSwap(uint256 pid, address strategy);\\n\\n    function flashProtocol() external view returns (address);\\n\\n    function flpTokenFactory() external view returns (address);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function getFlashStrategySushiSwap(uint256 pid) external view returns (address);\\n\\n    function predictFlashStrategySushiSwapAddress(uint256 pid) external view returns (address strategy);\\n\\n    function updateFeeRecipient(address _feeRecipient) external;\\n\\n    function createFlashStrategySushiSwap(uint256 pid) external returns (address strategy);\\n}\\n\",\"keccak256\":\"0xfa2ca9ab0537cf4b0cf915100d292d48201e905162c4ace0d552d3e5c1cec3f1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISousChef.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISousChef {\\n    error BillCreated();\\n    error InvalidRestaurant();\\n    error InvalidKitchen();\\n    error Forbidden();\\n\\n    event UpdateRestaurant(address indexed restaurant);\\n    event UpdateKitchen(address indexed kitchen);\\n    event CreateBill(uint256 indexed pid, address indexed bill);\\n    event Checkpoint();\\n\\n    function fSushi() external view returns (address);\\n\\n    function flashStrategyFactory() external view returns (address);\\n\\n    function startWeek() external view returns (uint256);\\n\\n    function restaurant() external view returns (address);\\n\\n    function kitchen() external view returns (address);\\n\\n    function getBill(uint256 pid) external view returns (address);\\n\\n    function weeklyRewards(uint256 week) external view returns (uint256);\\n\\n    function lastCheckpoint() external view returns (uint256);\\n\\n    function predictBillAddress(uint256 pid) external view returns (address bill);\\n\\n    function updateRestaurant(address _restaurant) external;\\n\\n    function updateKitchen(address _kitchen) external;\\n\\n    function createBill(uint256 pid) external returns (address strategy);\\n\\n    function checkpoint() external;\\n\\n    function mintFSushi(\\n        uint256 pid,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x005703330171f9ce003fc1cbea84b67d20889e7030d8f1ada00d7217367bba75\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e08060405234610102576040816108b2803803809161001f8285610107565b83398101031261010257600460206100418161003a85610140565b9401610140565b6080849052604051633e1875ed60e01b815290939092839182906001600160a01b03165afa9081156100f6576000916100ba575b5060a05260c05260405161075d9081610155823960805181610591015260a05181818160de0152818161021501526105d6015260c0518181816102fb01526106190152f35b906020823d82116100ee575b816100d360209383610107565b810103126100eb57506100e590610140565b38610075565b80fd5b3d91506100c6565b6040513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761012a57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101025756fe608080604052600436101561001357600080fd5b600090813560e01c908163233b256414610605575080633e1875ed146105c0578063654e6d771461057b5763db2441af1461004d57600080fd5b34610387576101603660031901126103875767ffffffffffffffff9060443582811161057757610081903690600401610648565b90926064359081116105735761009b903690600401610648565b909360a435926001600160a01b038416840361047a57610104359060ff8216820361056f57604051632ddefbf960e01b81526004803590820152966020886024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa978815610564578798610528575b506001600160a01b0388163b15610524579186939160ff610175610163956040519889978897631690af8760e11b895260243560048a015261012060248a015261012496878a01916106de565b878103600319016044890152916106de565b92608435606486015230608486015260e43560a48601521660c48401523560e48301526101443561010483015203818360018060a01b0389165af180156103d35761050d575b506040516370a0823160e01b81523060048201529192839290602090829060249082906001600160a01b03165afa9081156103d35783916104db575b50604051633750db2960e21b815260048035908201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156104d0578491610491575b506040516395da4c3160e01b81526001600160a01b03919091169190602081600481865afa8015610486578591829161043d575b50604051634360451760e01b81526004810194909452602484019290925260c43560448401526001600160a01b03938416606484015260848301819052919261016092849260a492849291165af190811561038a5782916103de575b506040516358e6837360e11b815260048035908201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156103d3578391610399575b506001600160a01b031690813b15610395578291604483926040519485938492636e553f6560e01b845260048401523360248401525af1801561038a576103775750f35b6103809061067e565b6103875780f35b80fd5b6040513d84823e3d90fd5b5050fd5b90506020813d6020116103cb575b816103b4602093836106a8565b81010312610395576103c5906106ca565b38610333565b3d91506103a7565b6040513d85823e3d90fd5b9050610160813d61016011610435575b816103fc61016093836106a8565b810103126104325761040d816106ca565b5061041a602082016106ca565b5060a0810151801515036104325760e00151386102dd565b50fd5b3d91506103ee565b9150506020813d60201161047e575b81610459602093836106a8565b8101031261047a57610160928561047160a4936106ca565b91945091610281565b8480fd5b3d915061044c565b6040513d87823e3d90fd5b90506020813d6020116104c8575b816104ac602093836106a8565b810103126104c3576104bd906106ca565b3861024d565b505050fd5b3d915061049f565b6040513d86823e3d90fd5b90506020813d602011610505575b816104f6602093836106a8565b810103126103955751386101f7565b3d91506104e9565b6020939261051c60249261067e565b9293506101bb565b8680fd5b9097506020813d60201161055c575b81610544602093836106a8565b8101031261052457610555906106ca565b9638610116565b3d9150610537565b6040513d89823e3d90fd5b8580fd5b8280fd5b5080fd5b50346103875780600319360112610387576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346103875780600319360112610387576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346105775781600319360112610577577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f840112156106795782359167ffffffffffffffff8311610679576020808501948460051b01011161067957565b600080fd5b67ffffffffffffffff811161069257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761069257604052565b51906001600160a01b038216820361067957565b9190808252602080920192916000805b8382106106fd57505050505090565b9091929394853560018060a01b0381168091036105735781528301948301939291600101906106ee56fea26469706673582212202486757f60b84e3ea8f0548af36b460a5a54c1699b0af629c8ebce93da23fcc364736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c908163233b256414610605575080633e1875ed146105c0578063654e6d771461057b5763db2441af1461004d57600080fd5b34610387576101603660031901126103875767ffffffffffffffff9060443582811161057757610081903690600401610648565b90926064359081116105735761009b903690600401610648565b909360a435926001600160a01b038416840361047a57610104359060ff8216820361056f57604051632ddefbf960e01b81526004803590820152966020886024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa978815610564578798610528575b506001600160a01b0388163b15610524579186939160ff610175610163956040519889978897631690af8760e11b895260243560048a015261012060248a015261012496878a01916106de565b878103600319016044890152916106de565b92608435606486015230608486015260e43560a48601521660c48401523560e48301526101443561010483015203818360018060a01b0389165af180156103d35761050d575b506040516370a0823160e01b81523060048201529192839290602090829060249082906001600160a01b03165afa9081156103d35783916104db575b50604051633750db2960e21b815260048035908201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156104d0578491610491575b506040516395da4c3160e01b81526001600160a01b03919091169190602081600481865afa8015610486578591829161043d575b50604051634360451760e01b81526004810194909452602484019290925260c43560448401526001600160a01b03938416606484015260848301819052919261016092849260a492849291165af190811561038a5782916103de575b506040516358e6837360e11b815260048035908201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156103d3578391610399575b506001600160a01b031690813b15610395578291604483926040519485938492636e553f6560e01b845260048401523360248401525af1801561038a576103775750f35b6103809061067e565b6103875780f35b80fd5b6040513d84823e3d90fd5b5050fd5b90506020813d6020116103cb575b816103b4602093836106a8565b81010312610395576103c5906106ca565b38610333565b3d91506103a7565b6040513d85823e3d90fd5b9050610160813d61016011610435575b816103fc61016093836106a8565b810103126104325761040d816106ca565b5061041a602082016106ca565b5060a0810151801515036104325760e00151386102dd565b50fd5b3d91506103ee565b9150506020813d60201161047e575b81610459602093836106a8565b8101031261047a57610160928561047160a4936106ca565b91945091610281565b8480fd5b3d915061044c565b6040513d87823e3d90fd5b90506020813d6020116104c8575b816104ac602093836106a8565b810103126104c3576104bd906106ca565b3861024d565b505050fd5b3d915061049f565b6040513d86823e3d90fd5b90506020813d602011610505575b816104f6602093836106a8565b810103126103955751386101f7565b3d91506104e9565b6020939261051c60249261067e565b9293506101bb565b8680fd5b9097506020813d60201161055c575b81610544602093836106a8565b8101031261052457610555906106ca565b9638610116565b3d9150610537565b6040513d89823e3d90fd5b8580fd5b8280fd5b5080fd5b50346103875780600319360112610387576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346103875780600319360112610387576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346105775781600319360112610577577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f840112156106795782359167ffffffffffffffff8311610679576020808501948460051b01011161067957565b600080fd5b67ffffffffffffffff811161069257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761069257604052565b51906001600160a01b038216820361067957565b9190808252602080920192916000805b8382106106fd57505050505090565b9091929394853560018060a01b0381168091036105735781528301948301939291600101906106ee56fea26469706673582212202486757f60b84e3ea8f0548af36b460a5a54c1699b0af629c8ebce93da23fcc364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}